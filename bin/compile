#!/bin/bash

# Variáveis de configuração
VAULT_ADDR="https://vault-cgny-41bd57b8411e.herokuapp.com"
VAULT_TOKEN="hvs.fwpPyv1VFS3POPy1QlJ6ijVG"

# Array com os caminhos das secretas
# CAMINHOS_SECRET=(
#     "job-purge/data/HEROKU_POSTGRESQL_SILVER_URL"
#     "league-of-legends-app/data/DATABASE_URL_TESTE"
#     "job-purge/metadata/DEBUG_HIDE_DATE"
# )
CAMINHOS_SECRET=(
    "job-purge/data/HEROKU_POSTGRESQL_SILVER_URL"
    "league-of-legends-app/data/DATABASE_URL_TESTE"
    "job-purge/data/DEBUG_HIDE_DATE"
)


# Função para obter uma secreta
get_secret() {
    local caminho="$1"
    local secret_data=$(curl -s \
        --header "X-Vault-Token: $VAULT_TOKEN" \
        --request GET \
        "$VAULT_ADDR/v1/$caminho")
    
    # Verificar se a solicitação foi bem-sucedida
    if [ "$(echo "$secret_data" | jq -r '.errors')" != "null" ]; then
        echo "Erro ao obter a secret em $caminho:"
        echo "$secret_data" | jq -r '.errors'
        return 1
    fi
    
    echo $secret_data

    data=$(echo $secret_data | jq -r '.data.data')
    echo $data | jq -r 'to_entries | .[] | "\(.key)=\(.value)"'

    echo "Adicionando a chave KEY ao arquivo .env."
    echo "# Path: $1" >> .env
    echo $data | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' >> .env
    echo "\n" >> .env
    echo "Chave adicionada com sucesso."

    
    # Extrair os dados da secret
    # echo "Dados da secret em $caminho:"
    # echo "$secret_data" | jq '.data'
}

if [ -f .env ]; then
    env_file=".env"
    backup_suffix=".backup_$(date +"%Y%m%d%H%M%S")"
    echo "O arquivo .env existe, renomeando para $env_file$backup_suffix..."
    mv "$env_file" "$env_file$backup_suffix"
else
    echo "O arquivo .env não existe. Criando..."
    touch .env
    echo "Arquivo .env criado com sucesso."
fi

# Iterar sobre os caminhos das secretas e obter cada uma
for caminho_secret in "${CAMINHOS_SECRET[@]}"; do
    get_secret "$caminho_secret"
done
