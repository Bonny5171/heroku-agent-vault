#!/bin/bash

# ARGs
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3


echo "O 1$ é: $BUILD_DIR"
echo "O 2$ é: $CACHE_DIR"
echo "O 3$ é: $ENV_DIR"

# load required environment variables
# ROLE_ID=$(<"$ENV_DIR/ROLE_ID")
# SECRETE_ID=$(<"$ENV_DIR/SECRETE_ID")

if [[ -n $ENV_DIR ]]; then
    VAULT_ADDR=$(<"$ENV_DIR/VAULT_ADDR")
    VAULT_TOKEN=$(<"$ENV_DIR/VAULT_TOKEN")
    VAULT_SECRETS_STR=$(<"$ENV_DIR/VAULT_SECRETS")
fi

# Remove os colchetes da string JSON
json_string="${VAULT_SECRETS_STR//[\"[\]]/}"

# Transforma a string em uma array
IFS=', ' read -r -a VAULT_SECRETS <<< "$json_string"

# Lendo a string para o array
declare -a VAULT_SECRETS

# Adiciona cada item da string JSON no array VAULT_SECRETS
for item in "${VAULT_SECRETS[@]}"; do
    VAULT_SECRETS+=("$item")
done

# if [[ -z $ROLE_ID ]]; then
#     echo "Did you forget to set ROLE_ID?"
#     exit 1
# fi

# if [[ -z $SECRETE_ID ]]; then
#     echo "Did you forget to set SECRETE_ID?"
#     exit 1
# fi

if [[ -z $VAULT_ADDR ]]; then
    echo "Did you forget to set VAULT_ADDR?"
    exit 1
else
    # Obtém o diretório atual
    VAULT_ADDR=$VAULT_ADDR
fi

if [[ -z $VAULT_TOKEN ]]; then
    echo "Did you forget to set VAULT_TOKEN?"
    exit 1
else
    VAULT_TOKEN=$VAULT_TOKEN
fi

if [[ -z $VAULT_SECRETS ]]; then
    echo "Did you forget to set VAULT_SECRETS?"
    exit 1
else
    VAULT_SECRETS=$VAULT_SECRETS
fi

# SOMENTE LOG
# echo "O 0 parâmetro é: $0"
# echo "O 1 parâmetro é: $1"
# echo "O segundo parâmetro custorm ROLE_ID é: $ROLE_ID"
# echo "O segundo parâmetro custorm SECRETE_ID é: $SECRETE_ID"
# echo "O segundo parâmetro custorm VAULT_ADDR é: $VAULT_ADDR"
# echo "O segundo parâmetro custorm VAULT_TOKEN é: $VAULT_TOKEN"
# echo "O segundo parâmetro custorm VAULT_SECRETS é: $VAULT_SECRETS"

# Função para obter uma secreta
get_secret() {
    local caminho="$1"

    echo "-----> Path sercret Vault: $caminho"

    local secret_data=$(curl -s \
        --header "X-Vault-Token: $VAULT_TOKEN" \
        --request GET \
        "$VAULT_ADDR/v1/$caminho")
    
    # Verificar se a solicitação foi bem-sucedida
    if [ "$(echo "$secret_data" | jq -r '.errors')" != "null" ]; then
        echo "Erro ao obter a secret em $caminho:"
        echo "$secret_data" | jq -r '.errors'
        return 1
    fi
    
    data=$(echo $secret_data | jq -r '.data.data')

    # SOMENTE LOG
    # echo $data
    echo $data | jq -r 'to_entries | .[] | "-----> \(.key)=\(.value)"'

    # Converter a string JSON para o formato key=value
    formatted_string=$(echo "$data" | jq -r 'to_entries|map("\(.key)=\(.value|tostring)")|.[]')
    # Percorre as propriedades e valores
    while IFS='=' read -r key value; do
        # Verifica se a propriedade já existe no .env
        if grep -q "^$key=" "$BUILD_DIR/.env"; then
            echo "-----> Propriedade $key JÁ EXISTE (=====)"
        else
            # Se a propriedade não existir, adiciona ao arquivo .env
            echo "$key=$value" >> "$BUILD_DIR/.env"
            # echo "$key=$value" >> "$CACHE_DIR/.env"
            echo "-----> Propriedade $key ADICIONADA (>>>>>)"
        fi
    done <<< "$formatted_string"

    echo "---------------------------------------------------------------"
}





#  MAIN
if [ -f "$BUILD_DIR/.env" ]; then
    echo "O arquivo .env existe, renomeando para $env_file$backup_suffix..."
    # echo "\n" >> "$BUILD_DIR/.env"
    # echo "\n" >> "$CACHE_DIR/.env"

    # Flow of backup
    # env_file="$BUILD_DIR/.env"
    # backup_suffix=".backup_$(date +"%Y%m%d%H%M%S")"
    # mv "$env_file" "$env_file$backup_suffix"
else
    echo "O arquivo .env não existe. Criando..."
    touch "$BUILD_DIR/.env"
    # touch "$CACHE_DIR/.env"
    echo "Arquivo .env criado com sucesso."
fi

# Iterar sobre os caminhos das secretas e obter cada uma
for caminho_secret in "${VAULT_SECRETS[@]}"; do
    get_secret "$caminho_secret"
done
